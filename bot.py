import logging
import os
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# ‚úÖ –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

client = OpenAI(api_key=OPENAI_API_KEY)

signs = [
    "–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞",
    "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"
]

periods = {
    "–°–µ–≥–æ–¥–Ω—è": "today",
    "3 –¥–Ω—è": "3days",
    "–ù–µ–¥–µ–ª—è": "week"
}


def get_sign_buttons():
    builder = InlineKeyboardBuilder()
    for sign in signs:
        builder.button(text=sign, callback_data=f"sign:{sign}")
    builder.adjust(3)
    return builder.as_markup()


def get_period_buttons(sign: str):
    builder = InlineKeyboardBuilder()
    for title, key in periods.items():
        builder.button(text=title, callback_data=f"period:{key}:{sign}")
    builder.adjust(3)
    return builder.as_markup()


@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-–≥–æ—Ä–æ—Å–∫–æ–ø –±–æ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
        reply_markup=get_sign_buttons()
    )


@dp.callback_query(F.data.startswith("sign:"))
async def choose_sign(callback):
    sign = callback.data.split(":")[1]
    await callback.message.edit_text(
        f"üïí –í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{sign}</b>. –ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ö–æ—Ç–∏—Ç–µ –≥–æ—Ä–æ—Å–∫–æ–ø?",
        reply_markup=get_period_buttons(sign)
    )


@dp.callback_query(F.data.startswith("period:"))
async def send_horoscope(callback):
    _, period, sign = callback.data.split(":")
    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ {period} –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ {sign}. "
        f"–û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è, –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤."
    )

    await callback.message.edit_text("üîÆ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ—Ä–æ—Å–∫–æ–ø...")

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8
        )
        forecast = response.choices[0].message.content
    except Exception as e:
        forecast = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ üò¢\n\n{str(e)}"

    await callback.message.answer(f"üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ {period} –¥–ª—è {sign}:\n\n{forecast}")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    dp.run_polling(bot)
