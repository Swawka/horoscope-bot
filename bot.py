import logging
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
import openai
import os

BOT_TOKEN = "8021267990:AAE4VmVO_gGsf2_01PD3E73FQ0qwPzRPZLw"
OPENAI_API_KEY = "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"

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

openai.api_key = OPENAI_API_KEY

SIGNS = ["–æ–≤–µ–Ω", "—Ç–µ–ª–µ—Ü", "–±–ª–∏–∑–Ω–µ—Ü—ã", "—Ä–∞–∫", "–ª–µ–≤", "–¥–µ–≤–∞",
         "–≤–µ—Å—ã", "—Å–∫–æ—Ä–ø–∏–æ–Ω", "—Å—Ç—Ä–µ–ª–µ—Ü", "–∫–æ–∑–µ—Ä–æ–≥", "–≤–æ–¥–æ–ª–µ–π", "—Ä—ã–±—ã"]
PERIODS = {"1": "—Å–µ–≥–æ–¥–Ω—è", "3": "–Ω–∞ 3 –¥–Ω—è", "7": "–Ω–∞ –Ω–µ–¥–µ–ª—é"}

def build_prompt(sign: str, period: str) -> str:
    return (
        f"–°–æ—Å—Ç–∞–≤—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ {sign} {period}. "
        "–ö—Ä–∞—Ç–∫–æ, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ, –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤."
    )

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        "üîÆ –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω—É–∂–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ (1, 3 –∏–ª–∏ 7).\n"
        "–ü—Ä–∏–º–µ—Ä: <b>—Ä–∞–∫ 3</b>"
    )

@dp.message(F.text)
async def handle_message(message: Message):
    parts = message.text.strip().lower().split()
    if len(parts) != 2 or parts[0] not in SIGNS or parts[1] not in PERIODS:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>–æ–≤–µ–Ω 1</b>"
        )
        return

    sign, p = parts
    await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑...")

    try:
        resp = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –∏–ª–∏ GPT‚Äë4, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            messages=[{"role": "user", "content": build_prompt(sign, PERIODS[p])}],
            temperature=0.8,
            max_tokens=200
        )
        forecast = resp.choices[0].message.content
        await message.answer(
            f"üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø {PERIODS[p]} –¥–ª—è <b>{sign.title()}</b>:\n\n{forecast}"
        )
    except Exception as e:
        logging.exception(e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

