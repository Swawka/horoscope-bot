
import logging
import openai
from aiogram import Bot, Dispatcher, executor, types
from config import BOT_TOKEN, OPENAI_API_KEY

openai.api_key = OPENAI_API_KEY
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
free_uses = {}

SIGNS = [
    "–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞",
    "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"
]

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for sign in SIGNS:
        keyboard.add(types.KeyboardButton(sign))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text in SIGNS)
async def sign_selected(message: types.Message):
    user_id = message.from_user.id
    sign = message.text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("1 –¥–µ–Ω—å", "3 –¥–Ω—è", "7 –¥–Ω–µ–π")
    keyboard.add("üîô –ù–∞–∑–∞–¥")
    await message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª {sign}. –ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –Ω—É–∂–µ–Ω –≥–æ—Ä–æ—Å–∫–æ–ø?", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text in ["1 –¥–µ–Ω—å", "3 –¥–Ω—è", "7 –¥–Ω–µ–π"])
async def forecast_handler(message: types.Message):
    user_id = message.from_user.id
    period = message.text
    sign = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫"
    async for m in bot.iter_history(message.chat.id, limit=5):
        if m.text in SIGNS:
            sign = m.text
            break

    if user_id not in free_uses:
        free_uses[user_id] = 3

    if free_uses[user_id] > 0:
        free_uses[user_id] -= 1
        prompt = f"–°–¥–µ–ª–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ {sign} –Ω–∞ {period}. –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤, —Å—Ç–∏–ª—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π."
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        forecast = response.choices[0].message.content
       await message.answer(f"üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ {period} –¥–ª—è {sign}:\n\n{forecast}")

        await message.answer(f"–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {free_uses[user_id]}")
    else:
        await message.answer("‚ùó –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞.

üíé –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–∞–º –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É: @–≤–∞—à_–Ω–∏–∫_–∏–ª–∏_—Å—Å—ã–ª–∫–∞")

@dp.message_handler(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def back_handler(message: types.Message):
    await start_handler(message)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
